version: "3"

services:

  spark-master:
    image: "bitnami/spark:3.2.0"
    ports:
      - "8080:8080"
    environment:
      - SPARK_MODE=master # default
    deploy:
      placement:
        constraints:
          - node.labels.role==worker
    networks:
      - spark-network

  spark-worker:
    image: "bitnami/spark:3.2.0"
    ports:
      - "8081:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=3G
    deploy:
      placement:
        constraints:
          - node.labels.role==worker
      replicas: 1
    networks:
      - spark-network

  driver:
    image: "maven:3.8.4-openjdk-11"
    ports:
      - "8090:8080"
    deploy:
      placement:
        constraints:
          - node.labels.role==master
    networks:
      - spark-network
    depends_on:
      - kafka

  generator:
    image: "maven:3.8.4-openjdk-11"
    ports:
      - "8091:8080"
    deploy:
      placement:
        constraints:
          - node.labels.role==master
    networks:
      - spark-network
    depends_on:
      - kafka

  kafka:
    image: "wurstmeister/kafka:latest"
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://kafka:9092 # Makes Kafka broker accessible in the docker overlay network (no external): https://rmoff.net/2018/08/02/kafka-listeners-explained/
    deploy:
      placement:
        constraints:
          - node.labels.role==master
    networks:
      - spark-network
    depends_on:
      - zookeeper

  zookeeper:
    image: "zookeeper:latest" # This image is configured with volumes at /data and /datalog to hold the Zookeeper in-memory database snapshots and the transaction log of updates to the database
    ports:
      - "2181:2181"
    restart: always # Since the Zookeeper "fails fast" it's better to always restart it
    environment:
      - ZOO_LOG4J_PROP="INFO,ROLLINGFILE" # Redirects logging to /logs/zookeeper.log, the image already has a volume in /logs
    deploy:
      placement:
        constraints:
          - node.labels.role==master
    networks:
      - spark-network

networks:
  spark-network:
    driver: overlay