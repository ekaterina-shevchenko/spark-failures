version: "3"

services:

  metrics-collector:
    build:
      context: .
      dockerfile: metrics-collector/Dockerfile
    container_name: metrics-collector
    environment:
      - MODE=structured
      - FAULT=packet_loss
      - TEST_NUMBER=2
    deploy:
      placement:
        constraints:
          - node.labels.role==manager
    networks:
      - spark-network
    depends_on:
      - mariadb

  mariadb:
    build:
      context: configs/db
    container_name: spark-mariadb
    command: --character-set-server=utf8 --lower_case_table_names
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=spark
      - MYSQL_DATABASE=spark
      - MYSQL_USER=spark
      - MYSQL_PASSWORD=spark
    deploy:
      placement:
        constraints:
          - node.labels.role==manager
    networks:
      - spark-network

  spark-master:
    build:
      context: configs/spark
    container_name: spark_master
    ports:
      - "8080:8080"
    environment:
      - SPARK_MODE=master # default
    deploy:
      placement:
        constraints:
          - node.labels.role==master
    networks:
      - spark-network

  spark-worker-1:
    build:
      context: configs/spark
    container_name: spark_worker_1
    ports:
      - "8081:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_WORKER_CORES=6
      - SPARK_WORKER_MEMORY=10G
    deploy:
      placement:
        constraints:
          - node.labels.role==worker-1
      replicas: 1
    networks:
      - spark-network

  spark-worker-2:
    build:
      context: configs/spark
    container_name: spark_worker_2
    ports:
      - "8082:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_WORKER_CORES=6
      - SPARK_WORKER_MEMORY=10G
    deploy:
      placement:
        constraints:
          - node.labels.role==worker-2
      replicas: 1
    networks:
      - spark-network

  #spark-worker-3:
  #  build:
  #    context: configs/spark
  #  container_name: spark_worker_3
  #  ports:
  #    - "8083:8081"
  #  environment:
  #    - SPARK_MODE=worker
  #    - SPARK_WORKER_CORES=6
  #    - SPARK_WORKER_MEMORY=10G
  #  deploy:
  #    placement:
  #      constraints:
  #        - node.labels.role==worker-3
  #    replicas: 1
  #  networks:
  #    - spark-network

  driver:
    image: "driver:latest"
    container_name: spark_driver
    ports:
      - "4040:4040"
    user: root # This fixes KerberosAuthException during spark-submit: https://issueexplorer.com/issue/bitnami/bitnami-docker-spark/27
    deploy:
      placement:
        constraints:
          - node.labels.role==master
    networks:
      - spark-network
    depends_on:
      - spark-master
      - spark-worker-1
      - spark-worker-2
      - kafka
    environment:
      - TZ=Europe/Berlin
      - AWS_ACCESS_KEY_ID=AKIA32DZ4YNVPL4KEXI5
      - AWS_SECRET_ACCESS_KEY=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

  generator:
    build:
      context: .
      dockerfile: generator/Dockerfile
    container_name: generator
    ports:
      - "8091:8080"
    environment:
      - BOOTSTRAP_KAFKA_SERVER=kafka:9092
    deploy:
      placement:
        constraints:
          - node.labels.role==manager
    networks:
      - spark-network
    depends_on:
      - driver

  gremlin-driver:
    image: "gremlin/gremlin:latest"
    container_name: gremlin-driver
    environment:
    - GREMLIN_TEAM_ID=8882f35b-8baa-4265-82f3-5b8baa82659b
    - GREMLIN_TEAM_SECRET=6e06d523-16ec-4c00-86d5-2316ecec00f0
    tty: true
    deploy:
      placement:
        constraints:
          - node.labels.role==manager
    networks:
      - spark-network

  kafka:
    image: "wurstmeister/kafka:latest"
    container_name: kafka
    ports:
      - "29092:29092"
      - "7071:7071"
    environment:
      - KAFKA_CREATE_TOPICS="output:3:1,purchases:3:1" # topic_name:number_of_partitions_number_of_replicas
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=HOST_INTERNAL://:29092, DOCKER_INTERNAL://kafka:9092 # Makes Kafka broker accessible in the docker overlay network (no external): https://rmoff.net/2018/08/02/kafka-listeners-explained/
      - KAFKA_ADVERTISED_LISTENERS=HOST_INTERNAL://localhost:29092, DOCKER_INTERNAL://kafka:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=HOST_INTERNAL:PLAINTEXT, DOCKER_INTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=DOCKER_INTERNAL
    deploy:
      placement:
        constraints:
          - node.labels.role==manager
    networks:
      - spark-network
    depends_on:
      - zookeeper

  grafana:
    build:
      context: configs/grafana
    container_name: spark_grafana
    volumes:
      - ./configs/grafana/data:/opt/bitnami/grafana/data
    ports:
      - "3000:3000"
    deploy:
      placement:
        constraints:
          - node.labels.role==manager
    networks:
      - spark-network

  prometheus:
    build:
      context: configs/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    depends_on:
      - kafka
    deploy:
      placement:
        constraints:
          - node.labels.role==manager
    networks:
      - spark-network

  zookeeper:
    image: "zookeeper:latest" # This image is configured with volumes at /data and /datalog to hold the Zookeeper in-memory database snapshots and the transaction log of updates to the database
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: always # Since the Zookeeper "fails fast" it's better to always restart it
    environment:
      - ZOO_LOG4J_PROP="INFO,ROLLINGFILE" # Redirects logging to /logs/zookeeper.log, the image already has a volume in /logs
    deploy:
      placement:
        constraints:
          - node.labels.role==manager
    networks:
      - spark-network

  node-exporter-1:
    image: bitnami/node-exporter
    deploy:
      placement:
        constraints:
          - node.labels.role==master
    ports:
      - "9100:9100"

networks:
  spark-network:
    driver: bridge